/********************************************
 * COMMON STYLES (for light and dark themes)
 ********************************************/
@mixin setCommonStyles() {
	$kinds: default, primary;
	$elms: heading, link;
	@each $kind in $kinds {
		@each $elm in $elms {
			$tag: if($elm == heading, h3, a);
			.#{$kind} ::slotted(#{$tag}) {
				font-family:    mapGet($vars, common, #{$kind}-#{$elm}-font-family) !important;
				font-size:      mapGet($vars, common, #{$kind}-#{$elm}-font-size) !important;
				font-weight:    mapGet($vars, common, #{$kind}-#{$elm}-font-weight) !important;
				letter-spacing: mapGet($vars, common, #{$kind}-#{$elm}-letter-spacing) !important;
				text-transform: mapGet($vars, common, #{$kind}-#{$elm}-text-transform) !important;
			}
		}
	}
	// Border Radius
	.primary.horizontal {
		::slotted(a),
		::slotted(rb-popover) {
			$r: mapGet($vars, common, primary-horizontal-link-border-radius);
			border-radius: $r $r 0 0 !important;
		}
	}
	.primary.vertical.dividers:not(.responsive) {
		::slotted(a),
		::slotted(rb-popover) {
			border-radius: mapGet($vars, common, primary-vertical-dividers-link-border-radius) !important;
		}
	}
	@each $kind in $kinds {
		.#{$kind}.responsive {
			$rn: mapGet($vars, common, #{$kind}-responsive-nav-border-radius);
			$rt: mapGet($vars, common, #{$kind}-responsive-trigger-border-radius);
			&.menu-left .nav       { border-radius: $rn 0 $rn $rn; }
			&.menu-right .nav      { border-radius: 0 $rn $rn $rn; }
			&.menu-open .trigger   { border-radius: $rt $rt 0 0; }
			&.menu-closed .trigger { border-radius: $rt; }
		}
	}
}

@include setCommonStyles();
